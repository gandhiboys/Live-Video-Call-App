{"ast":null,"code":"var _jsxFileName = \"/media/jahid/SSD Remaining/Running Projects/WEB/MERN Video Call(For CV)/Clone from github/Meeting/client/src/routes/Room.js\";\nimport React, { useEffect, useRef, useState, createRef } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport { useHistory } from \"react-router-dom\";\nimport M from \"materialize-css\";\nimport Video from './Video';\n\nconst Room = props => {\n  const [peers, setPeers] = useState([]); //state for rendering and also have stream of peers\n\n  const socketRef = useRef(); //own socket\n\n  const userVideo = useRef(); //for display own video\n\n  const webcamStream = useRef(); //own webcam stream\n\n  const messageRef = createRef(); //message input\n\n  const peersRef = useRef([]); //collection of peers who are currently connect to a room\n\n  const screenCaptureStream = useRef(); //screen capture stream\n\n  const roomId = props.match.params.roomId; //joined room id\n\n  const [isVideoMuted, setIsVideoMuted] = useState(false);\n  const [isAudioMuted, setIsAudioMuted] = useState(false);\n  const [messages, setMessages] = useState([]); //all messages state after joining the room\n\n  const history = useHistory();\n  useEffect(() => {\n    connectToSocketAndWebcamStream().then(() => {\n      socketRef.current.emit(\"joinRoom\", roomId); //sending to the server that an user joined to a room\n      //server send array of socket id of other user of same room so that new user can connect with other user via\n      //simple-peer for video transmission and message will be served using socket io\n\n      socketRef.current.on(\"usersInRoom\", users => {\n        const peers = [];\n        users.forEach(otherUserSocketId => {\n          //creating connection between two user via simple-peer for video\n          const peer = createPeer(otherUserSocketId, socketRef.current.id, webcamStream.current);\n          peersRef.current.push({\n            peerId: otherUserSocketId,\n            peer\n          });\n          peers.push({\n            peerId: otherUserSocketId,\n            peer\n          });\n        });\n        setPeers(peers);\n      }); //a new user joined at same room send signal,callerId(simple-peer) and stream to server and server give it to\n      //us to create peer between two peer and connect\n\n      socketRef.current.on(\"userJoined\", payload => {\n        let peer;\n        if (screenCaptureStream.current) peer = addPeer(payload.signal, payload.callerId, screenCaptureStream.current);else peer = addPeer(payload.signal, payload.callerId, webcamStream.current);\n        peersRef.current.push({\n          peerId: payload.callerId,\n          peer\n        });\n        const peerObj = {\n          peer,\n          peerId: payload.callerId\n        };\n        setPeers(users => [...users, peerObj]);\n      }); //receiving signal of other peer who is trying to connect and adding its signal at peersRef\n\n      socketRef.current.on(\"takingReturnedSignal\", payload => {\n        const item = peersRef.current.find(p => p.peerId === payload.id);\n        item.peer.signal(payload.signal);\n      }); //receiving message of an user and adding this at message state\n\n      socketRef.current.on('receiveMessage', payload => {\n        setMessages(messages => [...messages, payload]);\n      }); //user left and server send its peerId to disconnect from that peer\n\n      socketRef.current.on('userLeft', id => {\n        const peerObj = peersRef.current.find(p => p.peerId === id);\n        if (peerObj) peerObj.peer.destroy(); //cancel connection with disconnected peer\n\n        const peers = peersRef.current.filter(p => p.peerId !== id);\n        peersRef.current = peers;\n        setPeers(peers);\n      });\n    }); //eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    //checking is user logged in or not(if user has no token means not logged in)\n    const token = localStorage.getItem('Token');\n\n    if (!token) {\n      M.toast({\n        html: 'Login first',\n        classes: 'red'\n      });\n      history.push('/login');\n    } //eslint-disable-next-line\n\n  }, []);\n\n  const connectToSocketAndWebcamStream = async () => {\n    //connecting to server using socket\n    socketRef.current = io.connect(process.env.REACT_APP_BASE_URL, {\n      query: {\n        token: localStorage.getItem('Token')\n      }\n    });\n    webcamStream.current = await getWebcamStream();\n    userVideo.current.srcObject = webcamStream.current;\n    console.log(webcamStream.current.getAudioTracks()[0].enabled);\n    if (!webcamStream.current.getAudioTracks()[0].enabled) webcamStream.current.getAudioTracks()[0].enabled = true;\n  }; //taking video(webcam) and audio of device\n\n\n  const getWebcamStream = async () => {\n    return await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    });\n  };\n\n  function createPeer(userIdToSendSignal, callerId, stream) {\n    //if initiator is true then newly created peer will send a signal to other peer it those two peers accept signal\n    // then connection will be established between those two peers\n    //trickle for enable/disable trickle ICE candidates\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      config: {\n        iceServers: [{\n          urls: \"stun:numb.viagenie.ca\",\n          username: \"sultan1640@gmail.com\",\n          credential: \"98376683\"\n        }, {\n          urls: \"turn:numb.viagenie.ca\",\n          username: \"sultan1640@gmail.com\",\n          credential: \"98376683\"\n        }]\n      },\n      stream //My own stream of video and audio\n\n    }); //sending signal to second peer and if that receive than other(second) peer also will send an signal to this peer\n\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"sendingSignal\", {\n        userIdToSendSignal: userIdToSendSignal,\n        callerId: callerId,\n        signal\n      });\n    });\n    return peer;\n  } //after receiving of others user's signal adding to peer array and returning own signal to other user\n\n\n  function addPeer(incomingSignal, callerId, stream) {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    }); //other peer give its signal in signal object and this peer returning its own signal\n\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"returningSignal\", {\n        signal,\n        callerId: callerId\n      });\n    });\n    peer.signal(incomingSignal);\n    return peer;\n  }\n\n  const shareScreen = async () => {\n    //getting screen video\n    screenCaptureStream.current = await navigator.mediaDevices.getDisplayMedia({\n      cursor: true\n    });\n    const screenCaptureVideoStreamTrack = screenCaptureStream.current.getVideoTracks()[0]; //taking video track of stream\n    //replacing video track of each peer connected with getDisplayMedia video track and audio will remain as it is\n    //as all browser does not return audio track with getDisplayMedia\n    // eslint-disable-next-line\n\n    peers.map(peer => {\n      peer.peer.replaceTrack(peer.peer.streams[0].getVideoTracks()[0], screenCaptureVideoStreamTrack, peer.peer.streams[0]);\n    }); //destroying previous stream video track\n\n    const previousWebcamStream = userVideo.current.srcObject;\n    const previousWebcamStreamTracks = previousWebcamStream.getTracks();\n    previousWebcamStreamTracks.forEach(function (track) {\n      if (track.kind === 'video') track.stop();\n    });\n    userVideo.current.srcObject = screenCaptureStream.current; //When user will stop share then own video(of webcam) will appears\n\n    screenCaptureStream.current.getVideoTracks()[0].addEventListener('ended', () => {\n      startWebCamVideo();\n      setIsAudioMuted(false);\n      setIsVideoMuted(false);\n    });\n  };\n\n  const startWebCamVideo = async () => {\n    //destroying previous stream(webcam stream)\n    const previousWebcamStream = webcamStream.current;\n    const previousWebcamStreamTracks = previousWebcamStream.getTracks();\n    previousWebcamStreamTracks.forEach(track => {\n      track.stop();\n    }); //destroying previous stream(screen capture stream)\n\n    const previousScreenCaptureStream = screenCaptureStream.current;\n    const previousScreenCaptureStreamTracks = previousScreenCaptureStream.getTracks();\n    previousScreenCaptureStreamTracks.forEach(track => {\n      track.stop();\n    });\n    const newWebcamStream = await getWebcamStream(); //getting webcam video and audio\n\n    const videoStreamTrack = newWebcamStream.getVideoTracks()[0]; //taking video track of stream\n\n    const audioStreamTrack = newWebcamStream.getAudioTracks()[0]; //taking audio track of stream\n    //replacing all video track of all peer connected to this peer\n    // eslint-disable-next-line \n\n    peers.map(peer => {\n      //replacing video track\n      peer.peer.replaceTrack(peer.peer.streams[0].getVideoTracks()[0], videoStreamTrack, peer.peer.streams[0]); //replacing audio track\n\n      peer.peer.replaceTrack(peer.peer.streams[0].getAudioTracks()[0], audioStreamTrack, peer.peer.streams[0]);\n    });\n    userVideo.current.srcObject = newWebcamStream;\n    webcamStream.current = newWebcamStream;\n    screenCaptureStream.current = null;\n  };\n\n  const sendMessage = () => {\n    //sending message text with roomId to sever it will send message along other data to all connected user of current room\n    if (socketRef.current) {\n      socketRef.current.emit('sendMessage', {\n        roomId,\n        message: messageRef.current.value\n      });\n      messageRef.current.value = \"\";\n    }\n  }; //Mute or unmute audio\n\n\n  const muteOrUnmuteAudio = () => {\n    if (!isAudioMuted) {\n      webcamStream.current.getAudioTracks()[0].enabled = false;\n      setIsAudioMuted(true);\n    } else {\n      webcamStream.current.getAudioTracks()[0].enabled = true;\n      setIsAudioMuted(false);\n    }\n  }; //stop or play video\n\n\n  const playOrStopVideo = () => {\n    if (!isVideoMuted) {\n      userVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n      setIsVideoMuted(true);\n    } else {\n      userVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n      setIsVideoMuted(false);\n    }\n  };\n\n  const leaveMeeting = () => {\n    history.push('/');\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main__left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main__videos\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"video-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    muted: true,\n    ref: userVideo,\n    autoPlay: true,\n    playsInline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 29\n    }\n  }), peers.map(peer => /*#__PURE__*/React.createElement(Video, {\n    controls: true,\n    key: peer.peerId,\n    peer: peer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main__controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main__controls__block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    onClick: muteOrUnmuteAudio,\n    className: \"main__controls__button main__mute__button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 29\n    }\n  }, isAudioMuted ? /*#__PURE__*/React.createElement(\"i\", {\n    className: \"unmute fas fa-microphone-slash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 39\n    }\n  }) : /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-microphone\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 39\n    }\n  }), isAudioMuted ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 39\n    }\n  }, \"Unmute\") : /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 39\n    }\n  }, \"Mute\")), /*#__PURE__*/React.createElement(\"div\", {\n    onClick: playOrStopVideo,\n    className: \"main__controls__button main__video-grid_button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 29\n    }\n  }, isVideoMuted ? /*#__PURE__*/React.createElement(\"i\", {\n    className: \"stop fas fa-video-slash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 39\n    }\n  }) : /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-video\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 39\n    }\n  }), isVideoMuted ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 39\n    }\n  }, \"Play Video\") : /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 39\n    }\n  }, \"Stop Video\"))), /*#__PURE__*/React.createElement(\"div\", {\n    onClick: shareScreen,\n    className: \"main__controls__block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main__controls__button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-shield-alt\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 33\n    }\n  }, \"Share Screen\"))), /*#__PURE__*/React.createElement(\"div\", {\n    onClick: leaveMeeting,\n    className: \"main__controls__block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main__controls__button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"leave_meeting\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 33\n    }\n  }, \"Leave Meeting\"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main__right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main__header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 25\n    }\n  }, \"Chat\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main__chat__window\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 25\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 33\n    }\n  }, message.name, \"(\", message.username, \"):\", message.message)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main__message__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    ref: messageRef,\n    id: \"chat_message\",\n    type: \"text\",\n    placeholder: \"Type message here...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    onClick: sendMessage,\n    className: \"fa fa-paper-plane\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 25\n    }\n  })))));\n};\n\nexport default Room;","map":{"version":3,"sources":["/media/jahid/SSD Remaining/Running Projects/WEB/MERN Video Call(For CV)/Clone from github/Meeting/client/src/routes/Room.js"],"names":["React","useEffect","useRef","useState","createRef","io","Peer","useHistory","M","Video","Room","props","peers","setPeers","socketRef","userVideo","webcamStream","messageRef","peersRef","screenCaptureStream","roomId","match","params","isVideoMuted","setIsVideoMuted","isAudioMuted","setIsAudioMuted","messages","setMessages","history","connectToSocketAndWebcamStream","then","current","emit","on","users","forEach","otherUserSocketId","peer","createPeer","id","push","peerId","payload","addPeer","signal","callerId","peerObj","item","find","p","destroy","filter","token","localStorage","getItem","toast","html","classes","connect","process","env","REACT_APP_BASE_URL","query","getWebcamStream","srcObject","console","log","getAudioTracks","enabled","navigator","mediaDevices","getUserMedia","video","audio","userIdToSendSignal","stream","initiator","trickle","config","iceServers","urls","username","credential","incomingSignal","shareScreen","getDisplayMedia","cursor","screenCaptureVideoStreamTrack","getVideoTracks","map","replaceTrack","streams","previousWebcamStream","previousWebcamStreamTracks","getTracks","track","kind","stop","addEventListener","startWebCamVideo","previousScreenCaptureStream","previousScreenCaptureStreamTracks","newWebcamStream","videoStreamTrack","audioStreamTrack","sendMessage","message","value","muteOrUnmuteAudio","playOrStopVideo","leaveMeeting","index","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState, createRef } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport { useHistory } from \"react-router-dom\";\nimport M from \"materialize-css\";\n\nimport Video from './Video';\n\nconst Room = (props) => {\n    const [ peers, setPeers ] = useState([]); //state for rendering and also have stream of peers\n    const socketRef = useRef(); //own socket\n    const userVideo = useRef(); //for display own video\n    const webcamStream = useRef(); //own webcam stream\n    const messageRef = createRef(); //message input\n    const peersRef = useRef([]); //collection of peers who are currently connect to a room\n    const screenCaptureStream = useRef(); //screen capture stream\n    const roomId = props.match.params.roomId; //joined room id\n    const [ isVideoMuted, setIsVideoMuted ] = useState(false);\n    const [ isAudioMuted, setIsAudioMuted ] = useState(false);\n    const [ messages, setMessages ] = useState([]); //all messages state after joining the room\n    const history = useHistory();\n\n    useEffect(() => {\n        connectToSocketAndWebcamStream().then(() => {\n            socketRef.current.emit(\"joinRoom\", roomId); //sending to the server that an user joined to a room\n            //server send array of socket id of other user of same room so that new user can connect with other user via\n            //simple-peer for video transmission and message will be served using socket io\n            socketRef.current.on(\"usersInRoom\", users => {\n                const peers = [];\n                users.forEach(otherUserSocketId => {\n                    //creating connection between two user via simple-peer for video\n                    const peer = createPeer(otherUserSocketId, socketRef.current.id, webcamStream.current);\n                    peersRef.current.push({\n                        peerId: otherUserSocketId,\n                        peer\n                    });\n                    peers.push({\n                        peerId: otherUserSocketId,\n                        peer\n                    });\n                })\n                setPeers(peers);\n            })\n\n            //a new user joined at same room send signal,callerId(simple-peer) and stream to server and server give it to\n            //us to create peer between two peer and connect\n            socketRef.current.on(\"userJoined\", payload => {\n                let peer;\n                if(screenCaptureStream.current) peer = addPeer(payload.signal, payload.callerId, screenCaptureStream.current);\n                else peer = addPeer(payload.signal, payload.callerId, webcamStream.current);\n                peersRef.current.push({\n                    peerId: payload.callerId,\n                    peer\n                });\n                const peerObj = {\n                    peer,\n                    peerId: payload.callerId\n                };\n\n                setPeers(users => [...users, peerObj]);\n            });\n\n            //receiving signal of other peer who is trying to connect and adding its signal at peersRef\n            socketRef.current.on(\"takingReturnedSignal\", payload => {\n                const item = peersRef.current.find(p => p.peerId === payload.id);\n                item.peer.signal(payload.signal);\n            });\n\n            //receiving message of an user and adding this at message state\n            socketRef.current.on('receiveMessage', payload => {\n                setMessages(messages => [...messages, payload]);\n            });\n\n            //user left and server send its peerId to disconnect from that peer\n            socketRef.current.on('userLeft', id => {\n                const peerObj = peersRef.current.find(p => p.peerId === id);\n                if(peerObj) peerObj.peer.destroy(); //cancel connection with disconnected peer\n                const peers = peersRef.current.filter(p => p.peerId !== id);\n                peersRef.current = peers;\n                setPeers(peers);\n            });\n        });\n        //eslint-disable-next-line\n    }, []);\n\n    useEffect(() => {\n        //checking is user logged in or not(if user has no token means not logged in)\n        const token = localStorage.getItem('Token');\n        if(!token) {\n            M.toast({ html: 'Login first', classes:'red'});\n            history.push('/login');\n        }\n        //eslint-disable-next-line\n    }, []);\n\n    const connectToSocketAndWebcamStream = async() => {\n        //connecting to server using socket\n        socketRef.current = io.connect(process.env.REACT_APP_BASE_URL, {\n            query: {\n                token: localStorage.getItem('Token')\n            }\n        });\n        webcamStream.current = await getWebcamStream();\n        userVideo.current.srcObject = webcamStream.current;\n        console.log(webcamStream.current.getAudioTracks()[0].enabled);\n        if(!webcamStream.current.getAudioTracks()[0].enabled) webcamStream.current.getAudioTracks()[0].enabled = true;\n    }\n\n    //taking video(webcam) and audio of device\n    const getWebcamStream = async () => {\n        return await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n    }\n\n    function createPeer(userIdToSendSignal, callerId, stream) {\n        //if initiator is true then newly created peer will send a signal to other peer it those two peers accept signal\n        // then connection will be established between those two peers\n        //trickle for enable/disable trickle ICE candidates\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n            config: {\n                iceServers: [\n                    {\n                        urls: \"stun:numb.viagenie.ca\",\n                        username: \"sultan1640@gmail.com\",\n                        credential: \"98376683\"\n                    },\n                    {\n                        urls: \"turn:numb.viagenie.ca\",\n                        username: \"sultan1640@gmail.com\",\n                        credential: \"98376683\"\n                    }\n                ]\n            },\n            stream //My own stream of video and audio\n        });\n\n        //sending signal to second peer and if that receive than other(second) peer also will send an signal to this peer\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"sendingSignal\", { userIdToSendSignal: userIdToSendSignal, callerId: callerId, signal });\n        })\n        return peer;\n    }\n\n    //after receiving of others user's signal adding to peer array and returning own signal to other user\n    function addPeer(incomingSignal, callerId, stream) {\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n            stream\n        });\n\n        //other peer give its signal in signal object and this peer returning its own signal\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"returningSignal\", { signal, callerId: callerId });\n        });\n        peer.signal(incomingSignal);\n        return peer;\n    }\n\n    const shareScreen = async () => {\n        //getting screen video\n        screenCaptureStream.current = await navigator.mediaDevices.getDisplayMedia({ cursor: true });\n        const screenCaptureVideoStreamTrack = screenCaptureStream.current.getVideoTracks()[0]; //taking video track of stream\n        //replacing video track of each peer connected with getDisplayMedia video track and audio will remain as it is\n        //as all browser does not return audio track with getDisplayMedia\n        // eslint-disable-next-line\n        peers.map(peer => {\n            peer.peer.replaceTrack(\n                peer.peer.streams[0].getVideoTracks()[0],\n                screenCaptureVideoStreamTrack,\n                peer.peer.streams[0]\n            )\n        })\n        //destroying previous stream video track\n        const previousWebcamStream = userVideo.current.srcObject;\n        const previousWebcamStreamTracks = previousWebcamStream.getTracks();\n        previousWebcamStreamTracks.forEach(function(track) {\n            if(track.kind === 'video')  track.stop();\n        });\n        userVideo.current.srcObject = screenCaptureStream.current;\n\n        //When user will stop share then own video(of webcam) will appears\n        screenCaptureStream.current.getVideoTracks()[0].addEventListener('ended', () => {\n            startWebCamVideo();\n            setIsAudioMuted(false);\n            setIsVideoMuted(false);\n        });\n    }\n\n    const startWebCamVideo = async () => {\n        //destroying previous stream(webcam stream)\n        const previousWebcamStream = webcamStream.current;\n        const previousWebcamStreamTracks = previousWebcamStream.getTracks();\n        previousWebcamStreamTracks.forEach(track => {\n            track.stop();\n        });\n        //destroying previous stream(screen capture stream)\n        const previousScreenCaptureStream = screenCaptureStream.current;\n        const previousScreenCaptureStreamTracks = previousScreenCaptureStream.getTracks();\n        previousScreenCaptureStreamTracks.forEach(track => {\n            track.stop();\n        });\n\n        const newWebcamStream = await getWebcamStream(); //getting webcam video and audio\n        const videoStreamTrack = newWebcamStream.getVideoTracks()[0]; //taking video track of stream\n        const audioStreamTrack = newWebcamStream.getAudioTracks()[0]; //taking audio track of stream\n        //replacing all video track of all peer connected to this peer\n        // eslint-disable-next-line \n        peers.map(peer => {\n            //replacing video track\n            peer.peer.replaceTrack(\n                peer.peer.streams[0].getVideoTracks()[0],\n                videoStreamTrack,\n                peer.peer.streams[0]\n            );\n            //replacing audio track\n            peer.peer.replaceTrack(\n                peer.peer.streams[0].getAudioTracks()[0],\n                audioStreamTrack,\n                peer.peer.streams[0]\n            );\n        });\n        userVideo.current.srcObject = newWebcamStream;\n        webcamStream.current = newWebcamStream;\n        screenCaptureStream.current = null;\n    }\n\n    const sendMessage = () => {\n        //sending message text with roomId to sever it will send message along other data to all connected user of current room\n        if(socketRef.current) {\n            socketRef.current.emit('sendMessage', {\n                roomId,\n                message: messageRef.current.value\n            })\n            messageRef.current.value = \"\";\n        }\n    }\n\n    //Mute or unmute audio\n    const muteOrUnmuteAudio = () => {\n        if(!isAudioMuted) {\n            webcamStream.current.getAudioTracks()[0].enabled = false;\n            setIsAudioMuted(true);\n        } else {\n            webcamStream.current.getAudioTracks()[0].enabled = true;\n            setIsAudioMuted(false);\n        }\n    }\n\n    //stop or play video\n    const playOrStopVideo = () => {\n        if(!isVideoMuted) {\n            userVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n            setIsVideoMuted(true);\n        } else {\n            userVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n            setIsVideoMuted(false);\n        }\n    }\n\n    const leaveMeeting = () => {\n        history.push('/');\n    };\n\n    return (\n        <>\n            <div className=\"main\">\n                <div className=\"main__left\">\n                    <div className=\"main__videos\">\n                        <div id=\"video-grid\">\n                            <video muted ref={userVideo} autoPlay playsInline />\n                                {peers.map((peer) => (\n                                    <Video controls key={peer.peerId} peer={peer} />\n                                ))}\n                        </div>\n                    </div>\n                    <div className=\"main__controls\">\n                        <div className=\"main__controls__block\">\n                            <div onClick={muteOrUnmuteAudio} className=\"main__controls__button main__mute__button\">\n                                {isAudioMuted\n                                    ? <i className=\"unmute fas fa-microphone-slash\" />\n                                    : <i className=\"fas fa-microphone\" />\n                                }\n                                {isAudioMuted\n                                    ? <span>Unmute</span>\n                                    : <span>Mute</span>\n                                }\n                            </div>\n                            <div onClick={playOrStopVideo} className=\"main__controls__button main__video-grid_button\">\n                                {isVideoMuted\n                                    ? <i className=\"stop fas fa-video-slash\" />\n                                    : <i className=\"fas fa-video\" />\n                                }\n                                {isVideoMuted\n                                    ? <span>Play Video</span>\n                                    : <span>Stop Video</span>\n                                }\n                            </div>\n                        </div>\n                        <div onClick={shareScreen} className=\"main__controls__block\">\n                            <div className=\"main__controls__button\">\n                                <i className=\"fas fa-shield-alt\" />\n                                <span>Share Screen</span>\n                            </div>\n                        </div>\n                        <div onClick={leaveMeeting} className=\"main__controls__block\">\n                            <div className=\"main__controls__button\">\n                                <span className=\"leave_meeting\">Leave Meeting</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"main__right\">\n                    <div className=\"main__header\">\n                        <h6>Chat</h6>\n                    </div>\n                    <div className=\"main__chat__window\">\n                        <ul className=\"messages\">\n                            {messages.map((message, index) => (\n                                <li key={index}>{message.name}({message.username}):{message.message}</li>\n                            ))}\n                        </ul>\n                    </div>\n                    <div className=\"main__message__container\">\n                        <input ref={messageRef} id=\"chat_message\" type=\"text\" placeholder=\"Type message here...\" />\n                        <i onClick={sendMessage} className=\"fa fa-paper-plane\" />\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Room;\n"]},"metadata":{},"sourceType":"module"}