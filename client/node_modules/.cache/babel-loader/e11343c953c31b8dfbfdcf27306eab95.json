{"ast":null,"code":"import _regeneratorRuntime from\"/media/jahid/SSD Remaining/Running Projects/WEB/MERN Video Call(For CV)/Clone from github/Meeting/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/media/jahid/SSD Remaining/Running Projects/WEB/MERN Video Call(For CV)/Clone from github/Meeting/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _toConsumableArray from\"/media/jahid/SSD Remaining/Running Projects/WEB/MERN Video Call(For CV)/Clone from github/Meeting/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/media/jahid/SSD Remaining/Running Projects/WEB/MERN Video Call(For CV)/Clone from github/Meeting/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useRef,useState,createRef}from\"react\";import io from\"socket.io-client\";import Peer from\"simple-peer\";import{useHistory}from\"react-router-dom\";// import M from \"materialize-css\";\nimport Video from'./Video';var Room=function Room(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),peers=_useState2[0],setPeers=_useState2[1];//state for rendering and also have stream of peers\nvar socketRef=useRef();//own socket\nvar userVideo=useRef();//for display own video\nvar webcamStream=useRef();//own webcam stream\nvar messageRef=createRef();//message input\nvar peersRef=useRef([]);//collection of peers who are currently connect to a room\nvar screenCaptureStream=useRef();//screen capture stream\nvar roomId=props.match.params.roomId;//joined room id\nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isVideoMuted=_useState4[0],setIsVideoMuted=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isAudioMuted=_useState6[0],setIsAudioMuted=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),messages=_useState8[0],setMessages=_useState8[1];//all messages state after joining the room\nvar history=useHistory();useEffect(function(){connectToSocketAndWebcamStream().then(function(){socketRef.current.emit(\"joinRoom\",roomId);//sending to the server that an user joined to a room\n//server send array of socket id of other user of same room so that new user can connect with other user via\n//simple-peer for video transmission and message will be served using socket io\nsocketRef.current.on(\"usersInRoom\",function(users){var peers=[];users.forEach(function(otherUserSocketId){//creating connection between two user via simple-peer for video\nvar peer=createPeer(otherUserSocketId,socketRef.current.id,webcamStream.current);peersRef.current.push({peerId:otherUserSocketId,peer:peer});peers.push({peerId:otherUserSocketId,peer:peer});});setPeers(peers);});//a new user joined at same room send signal,callerId(simple-peer) and stream to server and server give it to\n//us to create peer between two peer and connect\nsocketRef.current.on(\"userJoined\",function(payload){var peer;if(screenCaptureStream.current)peer=addPeer(payload.signal,payload.callerId,screenCaptureStream.current);else peer=addPeer(payload.signal,payload.callerId,webcamStream.current);peersRef.current.push({peerId:payload.callerId,peer:peer});var peerObj={peer:peer,peerId:payload.callerId};setPeers(function(users){return[].concat(_toConsumableArray(users),[peerObj]);});});//receiving signal of other peer who is trying to connect and adding its signal at peersRef\nsocketRef.current.on(\"takingReturnedSignal\",function(payload){var item=peersRef.current.find(function(p){return p.peerId===payload.id;});item.peer.signal(payload.signal);});//receiving message of an user and adding this at message state\nsocketRef.current.on('receiveMessage',function(payload){setMessages(function(messages){return[].concat(_toConsumableArray(messages),[payload]);});});//user left and server send its peerId to disconnect from that peer\nsocketRef.current.on('userLeft',function(id){var peerObj=peersRef.current.find(function(p){return p.peerId===id;});if(peerObj)peerObj.peer.destroy();//cancel connection with disconnected peer\nvar peers=peersRef.current.filter(function(p){return p.peerId!==id;});peersRef.current=peers;setPeers(peers);});});//eslint-disable-next-line\n},[]);useEffect(function(){//checking is user logged in or not(if user has no token means not logged in)\n// const token = localStorage.getItem('Token');\n// if(!token) {\n//     M.toast({ html: 'Login first', classes:'red'});\n//     history.push('/login');\n// }\n//eslint-disable-next-line\n},[]);var connectToSocketAndWebcamStream=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0://connecting to server using socket\nsocketRef.current=io.connect(process.env.REACT_APP_BASE_URL,{query:{token:localStorage.getItem('Token')}});_context.next=3;return getWebcamStream();case 3:webcamStream.current=_context.sent;userVideo.current.srcObject=webcamStream.current;if(!webcamStream.current.getAudioTracks()[0].enabled)webcamStream.current.getAudioTracks()[0].enabled=true;case 6:case\"end\":return _context.stop();}}},_callee);}));return function connectToSocketAndWebcamStream(){return _ref.apply(this,arguments);};}();//taking video(webcam) and audio of device\nvar getWebcamStream=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return navigator.mediaDevices.getUserMedia({video:true,audio:true});case 2:return _context2.abrupt(\"return\",_context2.sent);case 3:case\"end\":return _context2.stop();}}},_callee2);}));return function getWebcamStream(){return _ref2.apply(this,arguments);};}();function createPeer(userIdToSendSignal,callerId,stream){//if initiator is true then newly created peer will send a signal to other peer it those two peers accept signal\n// then connection will be established between those two peers\n//trickle for enable/disable trickle ICE candidates\nvar peer=new Peer({initiator:true,trickle:false,config:{iceServers:[{urls:\"stun:numb.viagenie.ca\",username:\"sultan1640@gmail.com\",credential:\"98376683\"},{urls:\"turn:numb.viagenie.ca\",username:\"sultan1640@gmail.com\",credential:\"98376683\"}]},stream:stream//My own stream of video and audio\n});//sending signal to second peer and if that receive than other(second) peer also will send an signal to this peer\npeer.on(\"signal\",function(signal){socketRef.current.emit(\"sendingSignal\",{userIdToSendSignal:userIdToSendSignal,callerId:callerId,signal:signal});});return peer;}//after receiving of others user's signal adding to peer array and returning own signal to other user\nfunction addPeer(incomingSignal,callerId,stream){var peer=new Peer({initiator:false,trickle:false,stream:stream});//other peer give its signal in signal object and this peer returning its own signal\npeer.on(\"signal\",function(signal){socketRef.current.emit(\"returningSignal\",{signal:signal,callerId:callerId});});peer.signal(incomingSignal);return peer;}var shareScreen=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var screenCaptureVideoStreamTrack,previousWebcamStream,previousWebcamStreamTracks;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return navigator.mediaDevices.getDisplayMedia({cursor:true});case 2:screenCaptureStream.current=_context3.sent;screenCaptureVideoStreamTrack=screenCaptureStream.current.getVideoTracks()[0];//taking video track of stream\n//replacing video track of each peer connected with getDisplayMedia video track and audio will remain as it is\n//as all browser does not return audio track with getDisplayMedia\n// peers.map(peer => {\n//     peer.peer.replaceTrack(\n//         peer.peer.streams[0].getVideoTracks()[0],\n//         screenCaptureVideoStreamTrack,\n//         peer.peer.streams[0]\n//     )\n// })\npeers.map(function(peer){return peer.peer.replaceTrack(peer.peer.streams[0].getVideoTracks()[0],screenCaptureVideoStreamTrack,peer.peer.streams[0]);});//destroying previous stream video track\npreviousWebcamStream=userVideo.current.srcObject;previousWebcamStreamTracks=previousWebcamStream.getTracks();previousWebcamStreamTracks.forEach(function(track){if(track.kind==='video')track.stop();});userVideo.current.srcObject=screenCaptureStream.current;//When user will stop share then own video(of webcam) will appears\nscreenCaptureStream.current.getVideoTracks()[0].addEventListener('ended',function(){startWebCamVideo();setIsAudioMuted(false);setIsVideoMuted(false);});case 10:case\"end\":return _context3.stop();}}},_callee3);}));return function shareScreen(){return _ref3.apply(this,arguments);};}();var startWebCamVideo=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var previousWebcamStream,previousWebcamStreamTracks,previousScreenCaptureStream,previousScreenCaptureStreamTracks,newWebcamStream,videoStreamTrack,audioStreamTrack;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0://destroying previous stream(webcam stream)\npreviousWebcamStream=webcamStream.current;previousWebcamStreamTracks=previousWebcamStream.getTracks();previousWebcamStreamTracks.forEach(function(track){track.stop();});//destroying previous stream(screen capture stream)\npreviousScreenCaptureStream=screenCaptureStream.current;previousScreenCaptureStreamTracks=previousScreenCaptureStream.getTracks();previousScreenCaptureStreamTracks.forEach(function(track){track.stop();});_context4.next=8;return getWebcamStream();case 8:newWebcamStream=_context4.sent;//getting webcam video and audio\nvideoStreamTrack=newWebcamStream.getVideoTracks()[0];//taking video track of stream\naudioStreamTrack=newWebcamStream.getAudioTracks()[0];//taking audio track of stream\n//replacing all video track of all peer connected to this peer\npeers.map(function(peer){//replacing video track\npeer.peer.replaceTrack(peer.peer.streams[0].getVideoTracks()[0],videoStreamTrack,peer.peer.streams[0]);//replacing audio track\npeer.peer.replaceTrack(peer.peer.streams[0].getAudioTracks()[0],audioStreamTrack,peer.peer.streams[0]);});userVideo.current.srcObject=newWebcamStream;webcamStream.current=newWebcamStream;screenCaptureStream.current=null;case 15:case\"end\":return _context4.stop();}}},_callee4);}));return function startWebCamVideo(){return _ref4.apply(this,arguments);};}();var sendMessage=function sendMessage(e){e.preventDefault();//sending message text with roomId to sever it will send message along other data to all connected user of current room\nif(socketRef.current){socketRef.current.emit('sendMessage',{roomId:roomId,message:messageRef.current.value});messageRef.current.value=\"\";}};//Mute or unmute audio\nvar muteOrUnmuteAudio=function muteOrUnmuteAudio(){if(!isAudioMuted){webcamStream.current.getAudioTracks()[0].enabled=false;setIsAudioMuted(true);}else{webcamStream.current.getAudioTracks()[0].enabled=true;setIsAudioMuted(false);}};//stop or play video\nvar playOrStopVideo=function playOrStopVideo(){if(!isVideoMuted){userVideo.current.srcObject.getVideoTracks()[0].enabled=false;setIsVideoMuted(true);}else{userVideo.current.srcObject.getVideoTracks()[0].enabled=true;setIsVideoMuted(false);}};var leaveMeeting=function leaveMeeting(){history.push('/');};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"room row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col s10 p0\"},/*#__PURE__*/React.createElement(\"div\",{className:\"main__videos\"},/*#__PURE__*/React.createElement(\"div\",{id:\"video-grid\"},/*#__PURE__*/React.createElement(\"video\",{muted:true,ref:userVideo,autoPlay:true,playsInline:true}),peers.map(function(peer){return/*#__PURE__*/React.createElement(Video,{controls:true,key:peer.peerId,peer:peer});}))),/*#__PURE__*/React.createElement(\"div\",{className:\"main__controls\"},/*#__PURE__*/React.createElement(\"div\",{className:\"main__controls__block\"},/*#__PURE__*/React.createElement(\"div\",{onClick:muteOrUnmuteAudio,className:\"main__controls__button main__mute__button\"},isAudioMuted?/*#__PURE__*/React.createElement(\"i\",{className:\"unmute fas fa-microphone-slash\"}):/*#__PURE__*/React.createElement(\"i\",{className:\"fas fa-microphone\"}),isAudioMuted?/*#__PURE__*/React.createElement(\"span\",null,\"Unmute\"):/*#__PURE__*/React.createElement(\"span\",null,\"Mute\")),/*#__PURE__*/React.createElement(\"div\",{onClick:playOrStopVideo,className:\"main__controls__button main__video-grid_button\"},isVideoMuted?/*#__PURE__*/React.createElement(\"i\",{className:\"stop fas fa-video-slash\"}):/*#__PURE__*/React.createElement(\"i\",{className:\"fas fa-video\"}),isVideoMuted?/*#__PURE__*/React.createElement(\"span\",null,\"Play Video\"):/*#__PURE__*/React.createElement(\"span\",null,\"Stop Video\"))),/*#__PURE__*/React.createElement(\"div\",{onClick:shareScreen,className:\"main__controls__block\"},/*#__PURE__*/React.createElement(\"div\",{className:\"main__controls__button\"},/*#__PURE__*/React.createElement(\"i\",{className:\"fas fa-shield-alt\"}),/*#__PURE__*/React.createElement(\"span\",null,\"Share Screen\"))),/*#__PURE__*/React.createElement(\"div\",{onClick:leaveMeeting,className:\"main__controls__block\"},/*#__PURE__*/React.createElement(\"div\",{className:\"main__controls__button\"},/*#__PURE__*/React.createElement(\"span\",{className:\"leave_meeting\"},\"Leave Meeting\"))))),/*#__PURE__*/React.createElement(\"div\",{className:\"col s2 p0 main__right\"},/*#__PURE__*/React.createElement(\"div\",{className:\"main__header\"},/*#__PURE__*/React.createElement(\"h6\",null,\"Chat\")),/*#__PURE__*/React.createElement(\"div\",{className:\"main__chat__window\"},/*#__PURE__*/React.createElement(\"ul\",{className:\"messages\"},messages.map(function(message,index){return/*#__PURE__*/React.createElement(\"p\",{key:index},message.name,\"(\",message.username,\"):\",message.message);}))),/*#__PURE__*/React.createElement(\"form\",{onSubmit:sendMessage,className:\"main__message__container\"},/*#__PURE__*/React.createElement(\"input\",{ref:messageRef,id:\"chat_message\",type:\"text\",placeholder:\"Type message here...\"}),/*#__PURE__*/React.createElement(\"i\",{onClick:sendMessage,className:\"fa fa-paper-plane\"})))));};export default Room;","map":{"version":3,"sources":["/media/jahid/SSD Remaining/Running Projects/WEB/MERN Video Call(For CV)/Clone from github/Meeting/client/src/routes/Room.js"],"names":["React","useEffect","useRef","useState","createRef","io","Peer","useHistory","Video","Room","props","peers","setPeers","socketRef","userVideo","webcamStream","messageRef","peersRef","screenCaptureStream","roomId","match","params","isVideoMuted","setIsVideoMuted","isAudioMuted","setIsAudioMuted","messages","setMessages","history","connectToSocketAndWebcamStream","then","current","emit","on","users","forEach","otherUserSocketId","peer","createPeer","id","push","peerId","payload","addPeer","signal","callerId","peerObj","item","find","p","destroy","filter","connect","process","env","REACT_APP_BASE_URL","query","token","localStorage","getItem","getWebcamStream","srcObject","getAudioTracks","enabled","navigator","mediaDevices","getUserMedia","video","audio","userIdToSendSignal","stream","initiator","trickle","config","iceServers","urls","username","credential","incomingSignal","shareScreen","getDisplayMedia","cursor","screenCaptureVideoStreamTrack","getVideoTracks","map","replaceTrack","streams","previousWebcamStream","previousWebcamStreamTracks","getTracks","track","kind","stop","addEventListener","startWebCamVideo","previousScreenCaptureStream","previousScreenCaptureStreamTracks","newWebcamStream","videoStreamTrack","audioStreamTrack","sendMessage","e","preventDefault","message","value","muteOrUnmuteAudio","playOrStopVideo","leaveMeeting","index","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState, createRef } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport { useHistory } from \"react-router-dom\";\n// import M from \"materialize-css\";\n\nimport Video from './Video';\n\nconst Room = (props) => {\n    const [ peers, setPeers ] = useState([]); //state for rendering and also have stream of peers\n    const socketRef = useRef(); //own socket\n    const userVideo = useRef(); //for display own video\n    const webcamStream = useRef(); //own webcam stream\n    const messageRef = createRef(); //message input\n    const peersRef = useRef([]); //collection of peers who are currently connect to a room\n    const screenCaptureStream = useRef(); //screen capture stream\n    const roomId = props.match.params.roomId; //joined room id\n    const [ isVideoMuted, setIsVideoMuted ] = useState(false);\n    const [ isAudioMuted, setIsAudioMuted ] = useState(false);\n    const [ messages, setMessages ] = useState([]); //all messages state after joining the room\n    const history = useHistory();\n\n    useEffect(() => {\n        connectToSocketAndWebcamStream().then(() => {\n            socketRef.current.emit(\"joinRoom\", roomId); //sending to the server that an user joined to a room\n            //server send array of socket id of other user of same room so that new user can connect with other user via\n            //simple-peer for video transmission and message will be served using socket io\n            socketRef.current.on(\"usersInRoom\", users => {\n                const peers = [];\n                users.forEach(otherUserSocketId => {\n                    //creating connection between two user via simple-peer for video\n                    const peer = createPeer(otherUserSocketId, socketRef.current.id, webcamStream.current);\n                    peersRef.current.push({\n                        peerId: otherUserSocketId,\n                        peer\n                    });\n                    peers.push({\n                        peerId: otherUserSocketId,\n                        peer\n                    });\n                })\n                setPeers(peers);\n            })\n\n            //a new user joined at same room send signal,callerId(simple-peer) and stream to server and server give it to\n            //us to create peer between two peer and connect\n            socketRef.current.on(\"userJoined\", payload => {\n                let peer;\n                if(screenCaptureStream.current) peer = addPeer(payload.signal, payload.callerId, screenCaptureStream.current);\n                else peer = addPeer(payload.signal, payload.callerId, webcamStream.current);\n                peersRef.current.push({\n                    peerId: payload.callerId,\n                    peer\n                });\n                const peerObj = {\n                    peer,\n                    peerId: payload.callerId\n                };\n\n                setPeers(users => [...users, peerObj]);\n            });\n\n            //receiving signal of other peer who is trying to connect and adding its signal at peersRef\n            socketRef.current.on(\"takingReturnedSignal\", payload => {\n                const item = peersRef.current.find(p => p.peerId === payload.id);\n                item.peer.signal(payload.signal);\n            });\n\n            //receiving message of an user and adding this at message state\n            socketRef.current.on('receiveMessage', payload => {\n                setMessages(messages => [...messages, payload]);\n            });\n\n            //user left and server send its peerId to disconnect from that peer\n            socketRef.current.on('userLeft', id => {\n                const peerObj = peersRef.current.find(p => p.peerId === id);\n                if(peerObj) peerObj.peer.destroy(); //cancel connection with disconnected peer\n                const peers = peersRef.current.filter(p => p.peerId !== id);\n                peersRef.current = peers;\n                setPeers(peers);\n            });\n        });\n        //eslint-disable-next-line\n    }, []);\n\n    useEffect(() => {\n        //checking is user logged in or not(if user has no token means not logged in)\n        // const token = localStorage.getItem('Token');\n        // if(!token) {\n        //     M.toast({ html: 'Login first', classes:'red'});\n        //     history.push('/login');\n        // }\n        //eslint-disable-next-line\n    }, []);\n\n    const connectToSocketAndWebcamStream = async() => {\n        //connecting to server using socket\n        socketRef.current = io.connect(process.env.REACT_APP_BASE_URL, {\n            query: {\n                token: localStorage.getItem('Token')\n            }\n        });\n        webcamStream.current = await getWebcamStream();\n        userVideo.current.srcObject = webcamStream.current;\n        if(!webcamStream.current.getAudioTracks()[0].enabled) webcamStream.current.getAudioTracks()[0].enabled = true;\n    }\n\n    //taking video(webcam) and audio of device\n    const getWebcamStream = async () => {\n        return await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n    }\n\n    function createPeer(userIdToSendSignal, callerId, stream) {\n        //if initiator is true then newly created peer will send a signal to other peer it those two peers accept signal\n        // then connection will be established between those two peers\n        //trickle for enable/disable trickle ICE candidates\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n            config: {\n                iceServers: [\n                    {\n                        urls: \"stun:numb.viagenie.ca\",\n                        username: \"sultan1640@gmail.com\",\n                        credential: \"98376683\"\n                    },\n                    {\n                        urls: \"turn:numb.viagenie.ca\",\n                        username: \"sultan1640@gmail.com\",\n                        credential: \"98376683\"\n                    }\n                ]\n            },\n            stream //My own stream of video and audio\n        });\n\n        //sending signal to second peer and if that receive than other(second) peer also will send an signal to this peer\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"sendingSignal\", { userIdToSendSignal: userIdToSendSignal, callerId: callerId, signal });\n        })\n        return peer;\n    }\n\n    //after receiving of others user's signal adding to peer array and returning own signal to other user\n    function addPeer(incomingSignal, callerId, stream) {\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n            stream\n        });\n\n        //other peer give its signal in signal object and this peer returning its own signal\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"returningSignal\", { signal, callerId: callerId });\n        });\n        peer.signal(incomingSignal);\n        return peer;\n    }\n\n    const shareScreen = async () => {\n        //getting screen video\n        screenCaptureStream.current = await navigator.mediaDevices.getDisplayMedia({ cursor: true });\n        const screenCaptureVideoStreamTrack = screenCaptureStream.current.getVideoTracks()[0]; //taking video track of stream\n        //replacing video track of each peer connected with getDisplayMedia video track and audio will remain as it is\n        //as all browser does not return audio track with getDisplayMedia\n        // peers.map(peer => {\n        //     peer.peer.replaceTrack(\n        //         peer.peer.streams[0].getVideoTracks()[0],\n        //         screenCaptureVideoStreamTrack,\n        //         peer.peer.streams[0]\n        //     )\n        // })\n\n        peers.map(peer => (\n            peer.peer.replaceTrack(\n                peer.peer.streams[0].getVideoTracks()[0],\n                screenCaptureVideoStreamTrack,\n                peer.peer.streams[0]\n            )\n        ))\n        //destroying previous stream video track\n        const previousWebcamStream = userVideo.current.srcObject;\n        const previousWebcamStreamTracks = previousWebcamStream.getTracks();\n        previousWebcamStreamTracks.forEach(function(track) {\n            if(track.kind === 'video')  track.stop();\n        });\n        userVideo.current.srcObject = screenCaptureStream.current;\n\n        //When user will stop share then own video(of webcam) will appears\n        screenCaptureStream.current.getVideoTracks()[0].addEventListener('ended', () => {\n            startWebCamVideo();\n            setIsAudioMuted(false);\n            setIsVideoMuted(false);\n        });\n    }\n\n    const startWebCamVideo = async () => {\n        //destroying previous stream(webcam stream)\n        const previousWebcamStream = webcamStream.current;\n        const previousWebcamStreamTracks = previousWebcamStream.getTracks();\n        previousWebcamStreamTracks.forEach(track => {\n            track.stop();\n        });\n        //destroying previous stream(screen capture stream)\n        const previousScreenCaptureStream = screenCaptureStream.current;\n        const previousScreenCaptureStreamTracks = previousScreenCaptureStream.getTracks();\n        previousScreenCaptureStreamTracks.forEach(track => {\n            track.stop();\n        });\n\n        const newWebcamStream = await getWebcamStream(); //getting webcam video and audio\n        const videoStreamTrack = newWebcamStream.getVideoTracks()[0]; //taking video track of stream\n        const audioStreamTrack = newWebcamStream.getAudioTracks()[0]; //taking audio track of stream\n        //replacing all video track of all peer connected to this peer\n        peers.map(peer => {\n            //replacing video track\n            peer.peer.replaceTrack(\n                peer.peer.streams[0].getVideoTracks()[0],\n                videoStreamTrack,\n                peer.peer.streams[0]\n            );\n            //replacing audio track\n            peer.peer.replaceTrack(\n                peer.peer.streams[0].getAudioTracks()[0],\n                audioStreamTrack,\n                peer.peer.streams[0]\n            );\n        });\n        userVideo.current.srcObject = newWebcamStream;\n        webcamStream.current = newWebcamStream;\n        screenCaptureStream.current = null;\n    }\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n        //sending message text with roomId to sever it will send message along other data to all connected user of current room\n        if(socketRef.current) {\n            socketRef.current.emit('sendMessage', {\n                roomId,\n                message: messageRef.current.value\n            })\n            messageRef.current.value = \"\";\n        }\n    }\n\n    //Mute or unmute audio\n    const muteOrUnmuteAudio = () => {\n        if(!isAudioMuted) {\n            webcamStream.current.getAudioTracks()[0].enabled = false;\n            setIsAudioMuted(true);\n        } else {\n            webcamStream.current.getAudioTracks()[0].enabled = true;\n            setIsAudioMuted(false);\n        }\n    }\n\n    //stop or play video\n    const playOrStopVideo = () => {\n        if(!isVideoMuted) {\n            userVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n            setIsVideoMuted(true);\n        } else {\n            userVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n            setIsVideoMuted(false);\n        }\n    }\n\n    const leaveMeeting = () => {\n        history.push('/');\n    };\n\n    return (\n        <>\n            <div className=\"room row\">\n                <div className=\"col s10 p0\">\n                    <div className=\"main__videos\">\n                        <div id=\"video-grid\">\n                            <video muted ref={userVideo} autoPlay playsInline />\n                                {peers.map((peer) => (\n                                    <Video controls key={peer.peerId} peer={peer} />\n                                ))}\n                        </div>\n                    </div>\n                    <div className=\"main__controls\">\n                        <div className=\"main__controls__block\">\n                            <div onClick={muteOrUnmuteAudio} className=\"main__controls__button main__mute__button\">\n                                {isAudioMuted\n                                    ? <i className=\"unmute fas fa-microphone-slash\" />\n                                    : <i className=\"fas fa-microphone\" />\n                                }\n                                {isAudioMuted\n                                    ? <span>Unmute</span>\n                                    : <span>Mute</span>\n                                }\n                            </div>\n                            <div onClick={playOrStopVideo} className=\"main__controls__button main__video-grid_button\">\n                                {isVideoMuted\n                                    ? <i className=\"stop fas fa-video-slash\" />\n                                    : <i className=\"fas fa-video\" />\n                                }\n                                {isVideoMuted\n                                    ? <span>Play Video</span>\n                                    : <span>Stop Video</span>\n                                }\n                            </div>\n                        </div>\n                        <div onClick={shareScreen} className=\"main__controls__block\">\n                            <div className=\"main__controls__button\">\n                                <i className=\"fas fa-shield-alt\" />\n                                <span>Share Screen</span>\n                            </div>\n                        </div>\n                        <div onClick={leaveMeeting} className=\"main__controls__block\">\n                            <div className=\"main__controls__button\">\n                                <span className=\"leave_meeting\">Leave Meeting</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col s2 p0 main__right\">\n                    <div className=\"main__header\">\n                        <h6>Chat</h6>\n                    </div>\n                    <div className=\"main__chat__window\">\n                        <ul className=\"messages\">\n                            {messages.map((message, index) => (\n                                <p key={index}>{message.name}({message.username}):{message.message}</p>\n                            ))}\n                        </ul>\n                    </div>\n                    <form  onSubmit={sendMessage} className=\"main__message__container\">\n                        <input ref={messageRef} id=\"chat_message\" type=\"text\" placeholder=\"Type message here...\" />\n                        <i onClick={sendMessage} className=\"fa fa-paper-plane\" />\n                    </form>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Room;\n"]},"metadata":{},"sourceType":"module"}